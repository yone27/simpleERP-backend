{"version":3,"sources":["context/CRMContext.js","components/layout/Header.js","components/layout/Navegacion.js","config/axios.js","components/clientes/Cliente.js","components/layout/Spinner.js","components/clientes/Clientes.js","components/clientes/NuevoCliente.js","components/clientes/EditarCliente.js","components/productos/Producto.js","components/productos/Productos.js","components/productos/NuevoProducto.js","components/productos/EditarProducto.js","components/pedidos/DetallesPedido.js","components/pedidos/Pedidos.js","components/pedidos/FormBuscarProducto.js","components/pedidos/FormCantidadProducto.js","components/pedidos/NuevoPedido.js","components/auth/Login.js","App.js","serviceWorker.js","index.js"],"names":["CRMContext","React","createContext","CRMProvider","props","useState","token","auth","guardarAuth","Provider","value","children","withRouter","useContext","className","type","onClick","localStorage","setItem","history","push","Navegacion","to","clienteAxios","axios","create","baseURL","Cliente","cliente","consultarAPI","_id","nombre","apellido","empresa","email","telefono","id","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","result","delete","headers","Authorization","res","data","mensaje","Spinner","clientes","guardarClientes","useCallback","a","get","clientesConsulta","response","status","useEffect","getItem","length","map","key","guardarCliente","actualizarState","e","target","name","agregarCliente","preventDefault","post","code","onSubmit","placeholder","onChange","disabled","validarCliente","match","params","datosCliente","clienteConsulta","put","console","log","Producto","producto","precio","imagen","src","alt","productos","guardarProductos","productosConsulta","guardarProducto","file","imagePreview","archivo","guardarArchivo","agregarProducto","formData","FormData","append","leerInformacionProducto","min","step","width","files","URL","createObjectURL","productoConsulta","editarProducto","defaultValue","DetallasPedido","pedido","art","cantidad","total","Pedidos","pedidos","guardarPedidos","resultado","DetallesPedido","FormBuscarProducto","buscarProducto","leerDatosBusqueda","FormCantidadProducto","restarProductos","sumarProductos","index","eliminarProductoPedido","busqueda","guardarBusqueda","guardarTotal","nuevoTotal","actualizarTotal","resultadoBusqueda","productoResultado","i","todosProductos","filter","realizarPedido","credenciales","guardarCredenciales","iniciarSesion","respuesta","leerDatos","required","App","exact","path","component","Clientes","NuevoCliente","EditarCliente","Productos","NuevoProducto","EditarProducto","NuevoPedido","Login","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.de7f69a3.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nconst CRMContext = React.createContext([{}, () => {}])\r\n\r\nconst CRMProvider = props => {\r\n    // definir el state inicial\r\n    const [auth, guardarAuth] = useState({\r\n        token: '',\r\n        auth: false\r\n    })\r\n\r\n    return (\r\n        <CRMContext.Provider value={[auth, guardarAuth]}>\r\n            {props.children}\r\n        </CRMContext.Provider>\r\n    )\r\n}\r\n\r\nexport {CRMContext, CRMProvider}","import React, { useContext } from 'react';\r\nimport {CRMContext} from '../../context/CRMContext'\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nconst Header = (props) => {\r\n    // State\r\n    const [auth, guardarAuth] = useContext(CRMContext)\r\n\r\n    const cerrarSesion = () => {\r\n        // auth.auth = false y el token se remueve\r\n        guardarAuth({\r\n            token: '',\r\n            auth: false\r\n        })\r\n        localStorage.setItem('token', '')\r\n\r\n        // redireccionar\r\n        props.history.push('/iniciar-sesion')\r\n    }\r\n\r\n    return (\r\n        <header className=\"barra\">\r\n            <div className=\"contenedor\">\r\n                <div className=\"contenido-barra\">\r\n                    <h1>CRM - Administrador de Clientes</h1>\r\n                    {\r\n                        auth.auth ? (\r\n                            <button type=\"button\"\r\n                                className=\"btn btn-rojo\"\r\n                                onClick={cerrarSesion}\r\n                            > \r\n                                    <i className=\"far fa-times-circle\"></i>\r\n                                    Cerrar sesion\r\n                            </button>\r\n                        ): null\r\n                    }\r\n                </div>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n \r\nexport default withRouter(Header);","import React, { useContext } from 'react';\r\nimport { CRMContext } from '../../context/CRMContext'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Navegacion = () => {\r\n    const [auth] = useContext(CRMContext)\r\n\r\n    if (!auth.auth) return null\r\n\r\n    return (\r\n        <aside className=\"sidebar col-3\">\r\n            <h2>Administración</h2>\r\n            <nav className=\"navegacion\">\r\n                <Link to={\"/\"} className=\"clientes\">Clientes</Link>\r\n                <Link to={\"/productos\"} className=\"productos\">Productos</Link>\r\n                <Link to={\"/pedidos\"} className=\"pedidos\">Pedidos</Link>\r\n            </nav>\r\n        </aside>\r\n    );\r\n}\r\n\r\nexport default Navegacion;","import axios from 'axios'\r\n\r\nconst clienteAxios = axios.create({\r\n    baseURL: 'https://react-nodeyone.herokuapp.com'\r\n})\r\n\r\nexport default clienteAxios","import React, {useContext} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport clienteAxios from '../../config/axios'\r\nimport { CRMContext } from '../../context/CRMContext'\r\n\r\nfunction Cliente({cliente, consultarAPI}) {\r\n    // VARS\r\n    const {_id, nombre, apellido, empresa, email, telefono} = cliente\r\n\r\n    //State\r\n    const [auth] = useContext(CRMContext)\r\n\r\n    // eliminar cilente\r\n    const eliminarCliente = id => {\r\n        Swal.fire({\r\n            title: 'Estas seguro?',\r\n            text: \"Un cliente eliminado no se puede recuperar\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Si, eliminar',\r\n            cancelButtonText: 'Cancelar'\r\n        })\r\n        .then((result) => {\r\n            if (result.value) {\r\n                clienteAxios.delete(`/clientes/${id}`, {\r\n                    headers: {\r\n                        Authorization: `Bearer ${auth.token}`\r\n                    }\r\n                })\r\n                    .then(res => {\r\n                        Swal.fire(\r\n                            'Eliminado',\r\n                            res.data.mensaje,\r\n                            'success'\r\n                        )\r\n                        consultarAPI()\r\n                    })\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <li className=\"cliente\">\r\n            <div className=\"info-cliente\">\r\n                <p className=\"nombre\">{nombre} {apellido}</p>\r\n                <p className=\"empresa\"> {empresa} </p>\r\n                <p>{email}</p>\r\n                <p>Tel: {telefono}</p>\r\n            </div>\r\n            <div className=\"acciones\">\r\n                <Link to={`/clientes/editar/${_id}`} className=\"btn btn-azul\">\r\n                    <i className=\"fas fa-pen-alt\"></i>\r\n                    Editar Cliente\r\n                </Link>\r\n                <Link to={`/pedidos/nuevo/${_id}`} className=\"btn btn-amarillo\">\r\n                    <i className=\"fas fa-pen-alt\"></i>\r\n                    Nuevo pedido\r\n                </Link>\r\n                <button \r\n                    type=\"button\"\r\n                    className=\"btn btn-rojo btn-eliminar\"\r\n                    onClick={() => eliminarCliente(_id)}\r\n                >\r\n                    <i className=\"fas fa-times\"></i>\r\n                    Eliminar Cliente\r\n                </button>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Cliente","import React from 'react';\r\nimport './Spinner.css'\r\n\r\nfunction Spinner() {\r\n    return (\r\n        <div className=\"spinner\">\r\n            <div className=\"dot1\"></div>\r\n            <div className=\"dot2\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner","import React, {useEffect, useState, Fragment, useContext, useCallback} from 'react';\r\nimport {Link, withRouter} from 'react-router-dom'\r\n\r\nimport clienteAxios from '../../config/axios'\r\nimport Cliente from './Cliente'\r\nimport Spinner from '../layout/Spinner'\r\nimport { CRMContext } from '../../context/CRMContext'\r\n\r\nfunction Clientes(props) {\r\n    // State\r\n    const [clientes, guardarClientes] = useState([])\r\n    const [auth] = useContext(CRMContext)\r\n\r\n    const consultarAPI = useCallback(async () => {\r\n        if(auth.token !== '') {\r\n            try {\r\n                const clientesConsulta = await clienteAxios.get('/clientes', {\r\n                    headers: {\r\n                        Authorization: `Bearer ${auth.token}`\r\n                    }\r\n                })\r\n        \r\n                // colocar el resultado en el state\r\n                guardarClientes(clientesConsulta.data)\r\n            } catch (error) {\r\n                // error con autorizacion\r\n                if(error.response.status === 500) {\r\n                    props.history.push('/iniciar-sesion')\r\n                }\r\n            }\r\n        }else{\r\n            props.history.push('/iniciar-sesion')\r\n        }\r\n    }, [auth, props.history]) \r\n\r\n    // use effect es similar a componentDidMount y componentWillMount\r\n    useEffect(()=> {\r\n        consultarAPI()\r\n    }, [consultarAPI])\r\n\r\n    //verificar si el user esta auth\r\n    if(!auth.auth && (localStorage.getItem('token') !== auth.token)) {\r\n        props.history.push('/iniciar-sesion')\r\n    }\r\n    \r\n    return (\r\n        <Fragment>\r\n            <h2>Clientes</h2>\r\n            <Link to={\"/clientes/nuevo\"} className=\"btn btn-verde\">\r\n                <i className=\"fas fa-plus-circle\"></i>\r\n                Nuevo Cliente\r\n            </Link>\r\n            \r\n            {\r\n                !clientes.length ? (\r\n                    //Spinner de carga\r\n                    <Spinner /> \r\n                ):(\r\n                    <ul className=\"listado-clientes\">\r\n                        {\r\n                            clientes.map(cliente => (\r\n                                <Cliente\r\n                                    key={cliente._id}\r\n                                    cliente={cliente}\r\n                                    consultarAPI={consultarAPI}\r\n                                />   \r\n                            ))\r\n                        }\r\n                    </ul>\r\n                )\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\nexport default withRouter(Clientes)","import React, {Fragment, useState, useContext} from 'react';\r\nimport Swal from 'sweetalert2'\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nimport clienteAxios from '../../config/axios'\r\nimport { CRMContext } from '../../context/CRMContext'\r\n\r\nfunction NuevoCliente({history}) {\r\n    // State\r\n    const [cliente, guardarCliente] = useState({\r\n        nombre: '',\r\n        apellido: '',\r\n        empresa: '',\r\n        email: '',\r\n        telefono: ''\r\n    })\r\n    const [auth] = useContext(CRMContext)\r\n\r\n    // leer los datos del formulario\r\n    const actualizarState = e => {\r\n        // almacenando lo que el usuario escribe en el state\r\n        guardarCliente({\r\n            // obtener copia del state actual\r\n            ...cliente,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    // validar el formulario\r\n    const validarCliente = () => {\r\n        // destructuring\r\n        const {nombre, apellido, email, empresa, telefono} = cliente\r\n        // revisar que las propiedades del objeto sean correctas\r\n        let valido = !nombre.length || !apellido.length || !email.length || !empresa.length || !telefono.length\r\n\r\n        return valido\r\n    }\r\n\r\n    //  añade en la REST API un cliente nuevo\r\n    const agregarCliente = async e => {\r\n        e.preventDefault()\r\n        // enviar peticion\r\n        try {\r\n            const res = await clienteAxios.post('/clientes', cliente, {\r\n                headers: {\r\n                    Authorization: `Bearer ${auth.token}`\r\n                }\r\n            })\r\n\r\n            // valida si hay errores de mongo    \r\n            if(res.data.code === 11000) {\r\n                Swal.fire({\r\n                    type: 'error',\r\n                    title : 'Hubo un error',\r\n                    text: 'Ese cliente ya esta registrado'\r\n                })\r\n            }else{\r\n                Swal.fire(\r\n                    'Se agregó el cliente',\r\n                    res.data.mensaje,\r\n                    'success'\r\n                )\r\n            }\r\n            history.push('/')\r\n        } catch (error) {\r\n            Swal.fire({\r\n                type: 'error',\r\n                title : 'Hubo un error',\r\n                text: 'Intentelo de nuevo'\r\n            })\r\n        }\r\n    }\r\n\r\n    // verificar si el user esta auth\r\n    if(!auth.auth && (localStorage.getItem('token') !== auth.token)) {\r\n        history.push('/iniciar-sesion')\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2>Nuevo Cliente</h2>\r\n            \r\n            <form onSubmit={agregarCliente}>\r\n                <legend>Llena todos los campos</legend>\r\n                <div className=\"campo\">\r\n                    <label>Nombre:</label>\r\n                    <input type=\"text\"\r\n                        placeholder=\"Nombre Cliente\" \r\n                        name=\"nombre\"\r\n                        onChange={actualizarState}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"campo\">\r\n                    <label>Apellido:</label>\r\n                    <input type=\"text\"\r\n                        placeholder=\"Apellido Cliente\" \r\n                        name=\"apellido\"\r\n                        onChange={actualizarState}\r\n                    />\r\n                </div>\r\n            \r\n                <div className=\"campo\">\r\n                    <label>Empresa:</label>\r\n                    <input type=\"text\"\r\n                        placeholder=\"Empresa Cliente\" \r\n                        name=\"empresa\"\r\n                        onChange={actualizarState}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"campo\">\r\n                    <label>Email:</label>\r\n                    <input type=\"email\"\r\n                        placeholder=\"Email Cliente\" \r\n                        name=\"email\"\r\n                        onChange={actualizarState}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"campo\">\r\n                    <label>Teléfono:</label>\r\n                    <input type=\"tel\"\r\n                        placeholder=\"Teléfono Cliente\" \r\n                        name=\"telefono\"\r\n                        onChange={actualizarState}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"enviar\">\r\n                    <input type=\"submit\"\r\n                    className=\"btn btn-azul\"\r\n                    value=\"Agregar Cliente\"\r\n                    disabled={validarCliente()}\r\n                />\r\n                </div>\r\n            </form>\r\n\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n// HOC, es una funcion que toma un component y retorna un nuevo componente\r\nexport default withRouter(NuevoCliente)","import React, {Fragment, useState, useEffect, useContext} from 'react';\r\nimport Swal from 'sweetalert2'\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nimport clienteAxios from '../../config/axios'\r\nimport { CRMContext } from '../../context/CRMContext'\r\n\r\nfunction EditarCliente(props) {\r\n    // VARS\r\n    const {id} = props.match.params\r\n    \r\n    // State\r\n    const [cliente, datosCliente] = useState({\r\n        nombre: '',\r\n        apellido: '',\r\n        empresa: '',\r\n        email: '',\r\n        telefono: ''\r\n    })\r\n    const [auth] = useContext(CRMContext)\r\n    \r\n    // useEffect, cuando el componente carga act etc\r\n    useEffect(()=> {\r\n        // Query a la API\r\n        const consultarAPI = async() => {\r\n            if(auth.token !== '') {\r\n                try {\r\n                    const clienteConsulta = await clienteAxios.get(`/clientes/${id}`, {\r\n                        headers: {\r\n                            Authorization: `Bearer ${auth.token}`\r\n                        }\r\n                    })\r\n                    datosCliente(clienteConsulta.data)\r\n                } catch (error) {\r\n                    // error con autorizacion\r\n                    if(error.response.status === 500) {\r\n                        props.history.push('/iniciar-sesion')\r\n                    }\r\n                }\r\n            }else{\r\n                props.history.push('/iniciar-sesion')\r\n            }\r\n        }\r\n        consultarAPI()\r\n    }, [id, auth, props.history])\r\n\r\n    // leer los datos del formulario\r\n    const actualizarState = e => {\r\n        // almacenando lo que el usuario escribe en el state\r\n        datosCliente({\r\n            // obtener copia del state actual\r\n            ...cliente,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    // validar el formulario\r\n    const validarCliente = () => {\r\n        // destructuring\r\n        const {nombre, apellido, email, empresa, telefono} = cliente\r\n        // revisar que las propiedades del objeto sean correctas\r\n        let valido = !nombre.length || !apellido.length || !email.length || !empresa.length || !telefono.length\r\n\r\n        return valido\r\n    }\r\n    // enviar una pet por axios para actualizar el cli\r\n    const actulizarCliente = e => {\r\n        e.preventDefault()\r\n\r\n        clienteAxios.put(`clientes/${cliente._id}`, cliente, {\r\n            headers: {\r\n                Authorization: `Bearer ${auth.token}`\r\n            }\r\n        })\r\n            .then(res => {\r\n                // valida si hay errores de mongo    \r\n                if(res.data.code === 11000) {\r\n                    Swal.fire({\r\n                        type: 'error',\r\n                        title : 'Hubo un error',\r\n                        text: 'Ese correo ya esta registrado'\r\n                    })\r\n                    console.log('Error de duplicado de mongo');\r\n                }else{\r\n                    Swal.fire(\r\n                        'Correcto',\r\n                        'Se actualizó correctamente',\r\n                        'success'\r\n                    )\r\n                }\r\n\r\n                // redireccionar\r\n                props.history.push('/')\r\n            })\r\n    }\r\n\r\n    // verificar si el user esta auth\r\n    if(!auth.auth && (localStorage.getItem('token') === auth.token)) {\r\n        props.history.push('/iniciar-sesion')\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2>Editar Cliente</h2>\r\n            \r\n            <form \r\n                onSubmit={actulizarCliente}>\r\n                <legend>Llena todos los campos</legend>\r\n                <div className=\"campo\">\r\n                    <label>Nombre:</label>\r\n                    <input type=\"text\"\r\n                        placeholder=\"Nombre Cliente\" \r\n                        name=\"nombre\"\r\n                        value={cliente.nombre}\r\n                        onChange={actualizarState}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"campo\">\r\n                    <label>Apellido:</label>\r\n                    <input type=\"text\"\r\n                        placeholder=\"Apellido Cliente\" \r\n                        name=\"apellido\"\r\n                        value={cliente.apellido}\r\n                        onChange={actualizarState}\r\n                    />\r\n                </div>\r\n            \r\n                <div className=\"campo\">\r\n                    <label>Empresa:</label>\r\n                    <input type=\"text\"\r\n                        placeholder=\"Empresa Cliente\" \r\n                        name=\"empresa\"\r\n                        value={cliente.empresa}\r\n                        onChange={actualizarState}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"campo\">\r\n                    <label>Email:</label>\r\n                    <input type=\"email\"\r\n                        placeholder=\"Email Cliente\" \r\n                        name=\"email\"\r\n                        value={cliente.email}\r\n                        onChange={actualizarState}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"campo\">\r\n                    <label>Teléfono:</label>\r\n                    <input type=\"tel\"\r\n                        placeholder=\"Teléfono Cliente\" \r\n                        name=\"telefono\"\r\n                        value={cliente.telefono}\r\n                        onChange={actualizarState}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"enviar\">\r\n                    <input type=\"submit\"\r\n                    className=\"btn btn-azul\"\r\n                    value=\"Guardar Cliente\"\r\n                    disabled={validarCliente()}\r\n                />\r\n                </div>\r\n            </form>\r\n\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n// HOC, es una funcion que toma un component y retorna un nuevo componente\r\nexport default withRouter(EditarCliente)","import React, {useContext} from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport clienteAxios from '../../config/axios'\r\nimport { CRMContext } from '../../context/CRMContext'\r\n\r\nfunction Producto({producto, consultarAPI}) {\r\n    // VARS\r\n    const {_id, nombre, precio, imagen} = producto\r\n\r\n    // State\r\n    const [auth] = useContext(CRMContext)\r\n\r\n    // elimina un producto\r\n    const eliminarProducto = id => {\r\n        Swal.fire({\r\n            title: 'Estas seguro?',\r\n            text: \"Un producto eliminado no se puede recuperar\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Si, eliminar',\r\n            cancelButtonText: 'Cancelar'\r\n        })\r\n        .then((result) => {\r\n            if (result.value) {\r\n                clienteAxios.delete(`/productos/${id}`, {\r\n                    headers: {\r\n                        Authorization: `Bearer ${auth.token}`\r\n                    }\r\n                })\r\n                    .then(res => {\r\n                        Swal.fire(\r\n                            'Eliminado',\r\n                            res.data.mensaje,\r\n                            'success'\r\n                        )\r\n                        consultarAPI()\r\n                    })\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <li className=\"producto\">\r\n            <div className=\"info-producto\">\r\n                <p className=\"nombre\">{nombre}</p>\r\n                <p className=\"precio\">$ {precio}</p>\r\n                {\r\n                    imagen ? (\r\n                        <img src={`http://localhost:5000/${imagen}`} alt=\"imagen\"/>\r\n                    ) : null\r\n                }\r\n            </div>\r\n            <div className=\"acciones\">\r\n                <Link to={`/productos/editar/${_id}`} className=\"btn btn-azul\">\r\n                    <i className=\"fas fa-pen-alt\"></i>\r\n                    Editar Producto\r\n                </Link>\r\n                <button \r\n                    type=\"button\" \r\n                    className=\"btn btn-rojo btn-eliminar\" \r\n                    onClick={()=> eliminarProducto(_id)}\r\n                >\r\n                    <i className=\"fas fa-times\"></i>\r\n                    Eliminar Cliente\r\n                </button>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\nexport default Producto","import React, { Fragment, useState, useEffect, useContext , useCallback} from 'react';\r\nimport {Link,withRouter } from 'react-router-dom'\r\n\r\nimport clienteAxios from '../../config/axios'\r\nimport Producto from './Producto'\r\nimport Spinner from '../layout/Spinner'\r\nimport { CRMContext } from '../../context/CRMContext'\r\n\r\nfunction Productos(props) {\r\n    // State\r\n    const [productos, guardarProductos] = useState([])\r\n    const [auth] = useContext(CRMContext)\r\n\r\n    //Query a la API\r\n    const consultarAPI = useCallback(async() => {\r\n        if(auth.token !== '') {\r\n            try {\r\n                const productosConsulta = await clienteAxios.get('/productos', {\r\n                    headers: {\r\n                        Authorization: `Bearer ${auth.token}`\r\n                    }\r\n                })\r\n                guardarProductos(productosConsulta.data)\r\n            }catch (error) {\r\n                // error con autorizacion\r\n                if(error.response.status === 500) {\r\n                    props.history.push('/iniciar-sesion')\r\n                }\r\n            }\r\n        } else{\r\n            props.history.push('/iniciar-sesion')\r\n        }\r\n    }, [auth, props.history])\r\n\r\n    useEffect(()=> {\r\n        consultarAPI()\r\n    }, [consultarAPI])\r\n\r\n    //verificar si el user esta auth\r\n    if(!auth.auth && (localStorage.getItem('token') !== auth.token)) {\r\n        props.history.push('/iniciar-sesion')\r\n    }\r\n    \r\n    return (\r\n        <Fragment>\r\n            <h2>Productos</h2>\r\n            <Link to={'/productos/nuevo'} className=\"btn btn-verde nvo-cliente\"> <i className=\"fas fa-plus-circle\"></i>\r\n                Nuevo Producto\r\n            </Link>\r\n\r\n            {\r\n                !productos.length ? (\r\n                    //Spinner de carga\r\n                    <Spinner /> \r\n                ): (\r\n                    <ul className=\"listado-productos\">\r\n                        {\r\n                            productos.map(producto => (\r\n                                <Producto \r\n                                    key={producto._id}\r\n                                    producto={producto}\r\n                                    consultarAPI={consultarAPI}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                )\r\n            }\r\n\r\n        </Fragment>\r\n    )\r\n}\r\nexport default withRouter(Productos)","import React, {Fragment,useState, useContext} from 'react';\r\nimport Swal from 'sweetalert2'\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nimport clienteAxios from '../../config/axios'\r\nimport { CRMContext } from '../../context/CRMContext'\r\n\r\nfunction NuevoProducto(props) {\r\n    // State\r\n    const [producto, guardarProducto] = useState({\r\n        nombre: '',\r\n        precio: ''\r\n    })\r\n    const [archivo, guardarArchivo] = useState({\r\n        file: '',\r\n        imagePreview: ''\r\n    })\r\n    const [auth] = useContext(CRMContext)\r\n\r\n    // almacena el nuevo producto en la db\r\n    const agregarProducto = async e => {\r\n        e.preventDefault()\r\n\r\n        // Crear un form fata\r\n        const formData = new FormData()\r\n        formData.append('nombre',producto.nombre)\r\n        formData.append('precio',producto.precio)\r\n        formData.append('imagen',archivo.file)\r\n\r\n        // almacenarlo en la db\r\n        try {\r\n            const res = await clienteAxios.post('/productos', formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                    Authorization: `Bearer ${auth.token}`\r\n                }\r\n            })\r\n            \r\n            if(res.status === 200) {\r\n                Swal.fire(\r\n                    'Agregado correctamente',\r\n                    res.data.mensaje,\r\n                    'success'\r\n                )\r\n            }\r\n            props.history.push('/productos')\r\n        } catch (error) {\r\n            console.log(error);\r\n            Swal.fire({\r\n                type: 'error',\r\n                title: 'Hubo un error',\r\n                text: 'Vuelva a intentarlo'\r\n            })\r\n        }\r\n    }\r\n\r\n    // leer los datos del form\r\n    const leerInformacionProducto = e => {\r\n        guardarProducto({\r\n            // obtenemos una copia del state y agregar el nuevo\r\n            ...producto,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const leerArchivo = e => {\r\n        guardarArchivo({\r\n            file: e.target.files[0],\r\n            imagePreview: URL.createObjectURL(e.target.files[0])\r\n        })\r\n    }\r\n\r\n    // verificar si el user esta auth\r\n    if(!auth.auth && (localStorage.getItem('token') !== auth.token)) {\r\n        props.history.push('/iniciar-sesion')\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>NuevoProducto</h2>\r\n            <form\r\n                onSubmit={agregarProducto}\r\n            >\r\n                <legend>Llena todos los campos</legend>\r\n                <div className=\"campo\">\r\n                    <label>Nombre:</label>\r\n                    <input type=\"text\"\r\n                        placeholder=\"Nombre Producto\" \r\n                        name=\"nombre\"\r\n                        onChange={leerInformacionProducto}\r\n                    />\r\n                </div>\r\n                <div className=\"campo\">\r\n                    <label>Precio:</label>\r\n                    <input type=\"number\"\r\n                        name=\"precio\" \r\n                        min=\"0.00\" \r\n                        step=\"0.01\" \r\n                        placeholder=\"Precio\" \r\n                        onChange={leerInformacionProducto}\r\n                    />\r\n                </div>\r\n                <div className=\"campo\">\r\n                    <label>Imagen:</label>\r\n                    {\r\n                        archivo ? (\r\n                            <img src={archivo.imagePreview} alt=\"imagen\" width=\"200\"/>\r\n                        ) : null\r\n                    }\r\n                    <input type=\"file\"\r\n                        name=\"imagen\" \r\n                        onChange={leerArchivo}\r\n                    />\r\n                </div>\r\n                <div className=\"enviar\">\r\n                    <input type=\"submit\"\r\n                        className=\"btn btn-azul\" \r\n                        value=\"Agregar Producto\"\r\n                    />\r\n                </div>\r\n            </form>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default withRouter(NuevoProducto)","import React, {useState, useEffect, Fragment, useContext} from 'react';\r\nimport Swal from 'sweetalert2'\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nimport clienteAxios from '../../config/axios'\r\nimport { CRMContext } from '../../context/CRMContext'\r\n\r\nfunction EditarProducto(props) {\r\n    // VARS\r\n    const {id} = props.match.params\r\n    \r\n    // State\r\n    const [producto, guardarProducto] = useState({\r\n        nombre: '',\r\n        precio: '',\r\n        imagen: ''\r\n    })\r\n    const [auth] = useContext(CRMContext)\r\n    const [archivo, guardarArchivo] = useState({\r\n        file: '',\r\n        imagePreview: ''\r\n    })\r\n\r\n    // cuando el componente carga - esto es vainas de ciclo de vida creo yo\r\n    useEffect(()=>{\r\n        //consultar api para traer el producto a editar\r\n        const consultarAPI = async ()=>{\r\n            const productoConsulta = await clienteAxios.get(`/productos/${id}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${auth.token}`\r\n                }\r\n            })\r\n            guardarProducto(productoConsulta.data)\r\n        }\r\n        consultarAPI()\r\n    }, [id, auth])\r\n\r\n    // Edita un producto en la db\r\n    const editarProducto = async e => {\r\n        e.preventDefault()\r\n\r\n        // Crear un form fata\r\n        const formData = new FormData()\r\n        formData.append('nombre',producto.nombre)\r\n        formData.append('precio',producto.precio)\r\n        formData.append('imagen',archivo.file)\r\n\r\n        // almacenarlo en la db\r\n        try {\r\n            const res = await clienteAxios.put(`/productos/${id}`, formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                    Authorization: `Bearer ${auth.token}`\r\n                }\r\n            })\r\n            \r\n            if(res.status === 200) {\r\n                Swal.fire(\r\n                    'Editado correctamente',\r\n                    res.data.mensaje,\r\n                    'success'\r\n                )\r\n            }\r\n            \r\n            props.history.push('/productos')\r\n        } catch (error) {\r\n            Swal.fire({\r\n                type: 'error',\r\n                title : 'Hubo un error',\r\n                text: 'Vuelva a intentarlo'\r\n            })\r\n        }\r\n    }\r\n\r\n    //leer los datos del form\r\n    const leerInformacionProducto = e => {\r\n        guardarProducto({\r\n            //obtenemos una copia del state y agregar el nuevo\r\n            ...producto,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const leerArchivo = e => {\r\n        guardarArchivo({\r\n            file: e.target.files[0],\r\n            imagePreview: URL.createObjectURL(e.target.files[0])\r\n        })\r\n    }\r\n\r\n    // extraer los valores del state\r\n    const {nombre, precio, imagen} = producto\r\n\r\n    // verificar si el user esta auth\r\n    if(!auth.auth && (localStorage.getItem('token') !== auth.token)) {\r\n        props.history.push('/iniciar-sesion')\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>EditarProducto</h2>\r\n            <form\r\n                onSubmit={editarProducto}>\r\n                <legend>Llena todos los campos</legend>\r\n                <div className=\"campo\">\r\n                    <label>Nombre:</label>\r\n                    <input type=\"text\"\r\n                        placeholder=\"Nombre Producto\" \r\n                        name=\"nombre\"\r\n                        onChange={leerInformacionProducto}\r\n                        defaultValue={nombre}\r\n                        />\r\n                </div>\r\n                <div className=\"campo\">\r\n                    <label>Precio:</label>\r\n                    <input type=\"number\"\r\n                        name=\"precio\" \r\n                        min=\"0.00\" \r\n                        step=\"0.01\" \r\n                        placeholder=\"Precio\" \r\n                        defaultValue={precio}\r\n                        onChange={leerInformacionProducto}\r\n                        />\r\n                </div>\r\n                <div className=\"campo\">\r\n                    <label>Imagen:</label>\r\n                    {\r\n                        archivo.imagePreview ? (\r\n                            <img src={archivo.imagePreview} alt=\"imagen\" width=\"200\"/>\r\n                        ) : (\r\n                            <img src={`http://localhost:5000/${imagen}`} alt=\"imagen\" width=\"200\"/>\r\n                        )\r\n                    }\r\n                    <input type=\"file\"\r\n                        name=\"imagen\" \r\n                        onChange={leerArchivo}\r\n                        />\r\n                </div>\r\n                <div className=\"enviar\">\r\n                    <input type=\"submit\"\r\n                        className=\"btn btn-azul\" \r\n                        value=\"Editar Producto\"/>\r\n                </div>\r\n            </form>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default withRouter(EditarProducto)","import React from 'react';\r\n\r\nconst DetallasPedido = (props) => {\r\n    // VARS\r\n    const { pedido } = props\r\n\r\n    return (\r\n        <li className=\"pedido\">\r\n            <div className=\"info-pedido\">\r\n                <p className=\"id\">ID: </p>\r\n                <p className=\"nombre\">Cliente: {pedido.cliente.nombre} {pedido.cliente.apellido}</p>\r\n                <div className=\"articulos-pedido\">\r\n                    <p className=\"productos\">Artículos Pedido: </p>\r\n                    <ul>\r\n                        {\r\n                            pedido.pedido.map(art => (\r\n                                <li key={pedido._id + art.producto._id}>\r\n                                    <p>{art.producto.nombre}</p>\r\n                                    <p>Precio: {art.producto.precio}</p>\r\n                                    <p>Cantidad: {art.cantidad}</p>\r\n                                </li>\r\n                            ))\r\n\r\n                        }\r\n                    </ul>\r\n                </div>\r\n                <p className=\"total\">Total: ${pedido.total} </p>\r\n            </div>\r\n            <div className=\"acciones\">\r\n                {\r\n                    /*\r\n                 <a className=\"btn btn-azul\">\r\n                    <i className=\"fas fa-pen-alt\"></i>\r\n                    Editar Pedido\r\n                </a>   \r\n                    */\r\n                }\r\n\r\n                <button type=\"button\" className=\"btn btn-rojo btn-eliminar\">\r\n                    <i className=\"fas fa-times\"></i>\r\n                    Eliminar Pedido\r\n                </button>\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default DetallasPedido;","import React, {useEffect, useState, Fragment, useContext} from 'react';\r\n\r\nimport clienteAxios from '../../config/axios'\r\nimport DetallesPedido from './DetallesPedido'\r\nimport { CRMContext } from '../../context/CRMContext'\r\n\r\nfunction Pedidos({history}) {\r\n    //State\r\n    const [pedidos, guardarPedidos] = useState([])\r\n    const [auth] = useContext(CRMContext)\r\n\r\n    useEffect(()=> {\r\n        const consultarAPI = async () => {\r\n            //obtener los pedidos\r\n            const resultado = await clienteAxios.get('/pedidos', {\r\n                headers: {\r\n                    Authorization: `Bearer ${auth.token}`\r\n                }\r\n            })\r\n            guardarPedidos(resultado.data)\r\n        }\r\n        consultarAPI()\r\n    }, [auth])\r\n\r\n    //verificar si el user esta auth\r\n    if(!auth.auth && (localStorage.getItem('token') !== auth.token)) {\r\n        history.push('/iniciar-sesion')\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>Pedidos</h2>\r\n            {\r\n                !pedidos.length ? (\r\n                    <h3>No hay más pedidos</h3>\r\n                ): (\r\n                    <ul className=\"listado-pedidos\">\r\n                        {\r\n                            pedidos.map(pedido => (\r\n                                <DetallesPedido \r\n                                    key={pedido._id}\r\n                                    pedido={pedido}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                )\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\nexport default Pedidos","import React from 'react';\r\n\r\nfunction FormBuscarProducto(props) {\r\n    return (\r\n        <form\r\n            onSubmit={props.buscarProducto}\r\n        >\r\n            <legend>Busca un Producto y agrega una cantidad</legend>\r\n\r\n            <div className=\"campo\">\r\n                <label>Productos:</label>\r\n                <input type=\"text\" placeholder=\"Nombre Productos\" name=\"productos\" onChange={props.leerDatosBusqueda} />\r\n            </div>\r\n\r\n            <input type=\"submit\"\r\n                className=\"btn btn-azul btn-block\" />\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nexport default FormBuscarProducto","import React from 'react';\r\n\r\nfunction FormCantidadProducto(props) {\r\n    const {producto, restarProductos, sumarProductos, index, eliminarProductoPedido} = props\r\n    \r\n    return (\r\n        <li>\r\n            <div className=\"texto-producto\">\r\n                <p className=\"nombre\">{producto.nombre}</p>\r\n                <p className=\"precio\">{producto.precio}</p>\r\n            </div>\r\n            <div className=\"acciones\">\r\n                <div className=\"contenedor-cantidad\">\r\n                    <i \r\n                        className=\"fas fa-minus\"\r\n                        onClick={() => restarProductos(index)}\r\n                        ></i>\r\n                    <p>\r\n                        {producto.cantidad}\r\n                    </p>\r\n                    <i \r\n                        className=\"fas fa-plus\"\r\n                        onClick={() => sumarProductos(index)}\r\n                        ></i>\r\n                </div>\r\n                <button \r\n                    type=\"button\" \r\n                    className=\"btn btn-rojo\"\r\n                    onClick={() => eliminarProductoPedido(producto._id)}\r\n                >\r\n                    <i className=\"fas fa-minus-circle\"></i>\r\n                        Eliminar Producto\r\n                </button>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default FormCantidadProducto","import React, {Fragment, useState, useEffect, useContext} from 'react';\r\nimport Swal from 'sweetalert2'\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nimport clienteAxios from '../../config/axios'\r\nimport FormBuscarProducto from './FormBuscarProducto'\r\nimport FormCantidadProducto from './FormCantidadProducto'\r\nimport { CRMContext } from '../../context/CRMContext'\r\n\r\nfunction NuevoPedido(props) {\r\n    // Vars\r\n    const {id} = props.match.params\r\n\r\n    // State\r\n    const [cliente, guardarCliente] = useState({})\r\n    const [busqueda, guardarBusqueda] = useState('')\r\n    const [productos, guardarProductos] = useState([])\r\n    const [total, guardarTotal] = useState(0)\r\n    const [auth] = useContext(CRMContext)\r\n    \r\n    useEffect(()=> {\r\n        // actualizar el total a pagar\r\n        const actualizarTotal = () => {\r\n            // si el arreglo de productos es igual a 0 total = 0\r\n            if(productos.length === 0) {\r\n                guardarTotal(0)\r\n                return\r\n            }\r\n\r\n            // calcular el nuevo total\r\n            let nuevoTotal = 0\r\n\r\n            //recorrer todos los productos, sus cantidades y precios\r\n            productos.map(producto => (nuevoTotal += (producto.cantidad * producto.precio)))\r\n            \r\n            //almacenar total en el state\r\n            guardarTotal(nuevoTotal)\r\n        }\r\n\r\n        // obtener el cliente\r\n        const consultarAPI = async () => {\r\n            // consultar cliente act\r\n            const resultado = await clienteAxios.get(`/clientes/${id}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${auth.token}`\r\n                }\r\n            })\r\n\r\n            guardarCliente(resultado.data)\r\n        }\r\n        consultarAPI()\r\n\r\n        // actualizar el total a pagar\r\n        actualizarTotal()\r\n    }, [productos, id, auth])\r\n\r\n    const buscarProducto = async e => {\r\n        e.preventDefault()\r\n\r\n        //obtener los productos de la busqueda\r\n        const resultadoBusqueda = await clienteAxios.post(`/productos/busqueda/${busqueda}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${auth.token}`\r\n            }\r\n        })\r\n\r\n        // si no hay resultados una alerta, contrario lo add a l state\r\n        if(resultadoBusqueda.data[0]) {\r\n            let productoResultado = resultadoBusqueda.data[0]\r\n\r\n            // agregar la llave \"producto\" (copia de id)\r\n            productoResultado.producto = resultadoBusqueda.data[0]._id\r\n            productoResultado.cantidad = 0\r\n\r\n            // ponerlo en el state\r\n            guardarProductos([\r\n                ...productos,\r\n                productoResultado\r\n            ])\r\n        }else {\r\n            // no hay resultados\r\n            Swal.fire({\r\n                type: 'error',\r\n                title: 'No resultados',\r\n                text: 'No hay resultados'\r\n            })\r\n        }\r\n    }\r\n\r\n    //almacenar una busqueda en el state\r\n    const leerDatosBusqueda = e => {\r\n        guardarBusqueda(e.target.value)\r\n    }\r\n\r\n    // actulizar la cnt de productos\r\n    const restarProductos = i => {\r\n        // copiar el arreglo original de productos\r\n        const todosProductos = [...productos]\r\n\r\n        // validar si esta en 0 no puede ir mas alla\r\n        if(todosProductos[i].cantidad === 0) return\r\n\r\n        //decremento\r\n        todosProductos[i].cantidad--\r\n\r\n        //almacenarlo en el state\r\n        guardarProductos(todosProductos)\r\n    }\r\n\r\n    const sumarProductos = i => {\r\n        // copiar el arreglo para no mutar el original\r\n        const todosProductos = [...productos]\r\n\r\n        //incremento\r\n        todosProductos[i].cantidad++\r\n\r\n        //almacenarlo en el state\r\n        guardarProductos(todosProductos)\r\n    }\r\n\r\n    //elimina un producto por id\r\n    const eliminarProductoPedido = id => {\r\n        const todosProductos = productos.filter(producto => producto.producto !== id)\r\n\r\n        guardarProductos(todosProductos)\r\n    }\r\n\r\n    //alamacena el pedido en la db\r\n    const realizarPedido = async (e) => {\r\n        e.preventDefault()\r\n\r\n        //construimos el obj\r\n        const pedido = {\r\n            cliente: id,\r\n            pedido: productos,\r\n            total\r\n        }\r\n\r\n        // almacenarlo en la db\r\n        const resultado = await clienteAxios.post(`/pedidos`, pedido, {\r\n            headers: {\r\n                Authorization: `Bearer ${auth.token}`\r\n            }\r\n        })\r\n\r\n        //leer resultado\r\n        if(resultado.status === 200) {\r\n            //todo ok\r\n            Swal.fire({\r\n                type: 'success',\r\n                title: 'Correcto',\r\n                text: resultado.data.mensaje\r\n            })\r\n        }else {\r\n            //todo bad\r\n            Swal.fire({\r\n                type: 'error',\r\n                title: 'Hubo un error',\r\n                text: 'Vuelva a intentarlo'\r\n            })\r\n        }\r\n\r\n        //redireccionar\r\n        props.history.push('/pedidos')\r\n    }\r\n\r\n    //verificar si el user esta auth\r\n    if(!auth.auth && (localStorage.getItem('token') !== auth.token)) {\r\n        props.history.push('/iniciar-sesion')\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"ficha-cliente\">\r\n                <h3>Datos de Cliente</h3>\r\n                <p>{cliente.nombre} {cliente.apellido}</p>\r\n                <p>{cliente.telefono}</p>\r\n            </div>\r\n\r\n            <FormBuscarProducto \r\n                buscarProducto={buscarProducto}\r\n                leerDatosBusqueda={leerDatosBusqueda}\r\n            />\r\n\r\n            <ul className=\"resumen\">\r\n                {\r\n                    productos.map((producto, index)=> (\r\n                        <FormCantidadProducto\r\n                            producto={producto}\r\n                            key={producto.producto}\r\n                            restarProductos={restarProductos}\r\n                            sumarProductos={sumarProductos}\r\n                            index={index}\r\n                            eliminarProductoPedido={eliminarProductoPedido}\r\n                        />\r\n                    ))\r\n                }\r\n            </ul>\r\n            <p className=\"total\">\r\n                Total a pagar: <span>${total} </span>\r\n            </p>\r\n            {\r\n                total > 0 ? (\r\n                    <form \r\n                        onSubmit={realizarPedido}\r\n                    >\r\n                        <div className=\"enviar\">\r\n                            <input type=\"submit\" className=\"btn btn-azul\" value=\"Agregar Pedido\"/>\r\n                        </div>\r\n                </form>\r\n                ) : null\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default withRouter(NuevoPedido)","import React, {useState, useContext} from 'react';\r\nimport Swal from 'sweetalert2';\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nimport clienteAxios from '../../config/axios';\r\nimport { CRMContext } from '../../context/CRMContext';\r\n\r\nconst Login = (props) => {\r\n    // State\r\n    const [, guardarAuth] = useContext(CRMContext)\r\n    const [credenciales, guardarCredenciales] = useState({})\r\n\r\n    // iniciar sesion en el servidor\r\n    const iniciarSesion = async e => {\r\n        e.preventDefault()\r\n        // autenticar usuario\r\n\r\n        try {\r\n            const respuesta = await clienteAxios.post('/iniciar-sesion', credenciales)\r\n            \r\n            // extraer el token y colocarlo en localStorage\r\n            const {token} = respuesta.data\r\n            localStorage.setItem('token', token)\r\n\r\n            // colocarlo en el state\r\n            guardarAuth({\r\n                token,\r\n                auth: true\r\n            })\r\n\r\n            Swal.fire(  \r\n                'Login correcto',\r\n                'Has iniciado sesión',\r\n                'success'\r\n            )\r\n\r\n            // redirect\r\n            props.history.push('/')\r\n\r\n        } catch (error) {\r\n            Swal.fire({\r\n                type: 'error',\r\n                title: 'Hubo un error',\r\n                text: error.response.data.mensaje\r\n            })\r\n        }\r\n    }\r\n\r\n    // asignar lo que el usario escribe en el state\r\n    const leerDatos = e => {\r\n        guardarCredenciales({\r\n            ...credenciales,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    return ( \r\n        <div className=\"login\">\r\n            <h2>Iniciar Sesión</h2>\r\n            <div className=\"contenedor-formulario\">\r\n                <form onSubmit={iniciarSesion}>\r\n                    <div className=\"campo\">\r\n                        <label>Email</label>\r\n                        <input type=\"email\"\r\n                            name=\"email\"\r\n                            placeholder=\"Email para iniciar sesión\"\r\n                            required\r\n                            onChange={leerDatos}\r\n                        />\r\n                    </div>\r\n                    <div className=\"campo\">\r\n                        <label>Password</label>\r\n                        <input type=\"password\"\r\n                            name=\"password\"\r\n                            placeholder=\"Password para iniciar sesión\"\r\n                            required\r\n                            onChange={leerDatos}\r\n                        />\r\n                    </div>\r\n\r\n                    <p>\r\n                        User: test@test.com\r\n                        Pass: 123456\r\n                    </p>\r\n                    <input type=\"submit\" value=\"iniciar sesión\" className=\"btn btn-azul btn-block\"/>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default withRouter(Login);","import React, {Fragment, useContext} from 'react';\r\n\r\n// Routing\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\r\n\r\n// Layout\r\nimport Header from './components/layout/Header'\r\nimport Navegacion from './components/layout/Navegacion'\r\n\r\n// Components \r\nimport Clientes from './components/clientes/Clientes'\r\nimport NuevoCliente from './components/clientes/NuevoCliente'\r\nimport EditarCliente from './components/clientes/EditarCliente'\r\n\r\nimport Productos from './components/productos/Productos'\r\nimport NuevoProducto from './components/productos/NuevoProducto'\r\nimport EditarProducto from './components/productos/EditarProducto'\r\n\r\nimport Pedidos from './components/pedidos/Pedidos'\r\nimport NuevoPedido from './components/pedidos/NuevoPedido'\r\n\r\nimport Login from './components/auth/Login'\r\n\r\n// Settings\r\n\r\nimport {CRMContext, CRMProvider} from './context/CRMContext'\r\n\r\nconst App = () => {\r\n    // Configurar context para usarlo\r\n    const [auth, guardarAuth] = useContext(CRMContext)\r\n    \r\n    return ( \r\n        <Router>\r\n            <Fragment>\r\n                <CRMProvider value={[auth, guardarAuth]}>\r\n                    <Header/>\r\n                    <div className=\"grid contenedor contenido-principal\">\r\n                        <Navegacion/>\r\n                        <main className=\"caja-contenido col-9\">\r\n                            <Switch>\r\n                                <Route exact path=\"/\" component={Clientes}></Route>\r\n                                <Route exact path=\"/clientes/nuevo\" component={NuevoCliente}></Route>\r\n                                <Route exact path=\"/clientes/editar/:id\" component={EditarCliente}></Route>\r\n                                \r\n                                <Route exact path=\"/productos\" component={Productos}></Route>\r\n                                <Route exact path=\"/productos/nuevo\" component={NuevoProducto}></Route>\r\n                                <Route exact path=\"/productos/editar/:id\" component={EditarProducto}></Route>\r\n\r\n                                <Route exact path=\"/pedidos\" component={Pedidos}></Route>\r\n                                <Route exact path=\"/pedidos/nuevo/:id\" component={NuevoPedido}></Route>\r\n                                \r\n                                <Route exact path=\"/iniciar-sesion\" component={Login}></Route>\r\n                            </Switch>\r\n                        </main>\r\n                    </div>\r\n                </CRMProvider>\r\n            </Fragment>\r\n        </Router>\r\n    );\r\n}\r\n \r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( \n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}